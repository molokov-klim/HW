GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBash, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстовый файл как в первом ДЗ по Terminal. 
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON. === curl -u 'molokov-klim:TOKEN' https://api.github.com/user/repos -d '{"name":"JSON"}'
( генерируем токен по инструкции 
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token )
 5. Клонировать репозиторий JSON на локальный компьютер. === git clone https://github.com/USER/REPO.git
 6. Внутри локального JSON создать файл “new.json”. === touch new.json
 7. Добавить файл под гит. === git add new.json
 8. Закоммитить файл. === git commit
 9. Отправить файл на внешний GitHub репозиторий. === git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON. === vim new.json (+add content)
 11. Отправить изменения на внешний репозиторий. === git add . && git commit -m "first commit" && git push
 12. Создать файл preferences.json === touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON. === vim preferences.json (+add content)
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON === touch skills.json && vim sklls.json  (+add content)
 15. Отправить сразу 2 файла на внешний репозиторий. === git add . && git commit && git push
 16. На веб интерфейсе создать файл bug_report.json. === create file (UI)
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === Commit changes (UI)
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. === edit this file (UI)
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === Commit changes (UI)
 20. Синхронизировать внешний и локальный репозиторий JSON.  === git pull 

XML
 21. Создать внешний репозиторий c названием XML. === curl -u 'molokov-klim:TOKEN' https://api.github.com/user/repos -d '{"name":"XML"}'
 22. Клонировать репозиторий XML на локальный компьютер. === git clone https://github.com/molokov-klim/xml.git
 23. Внутри локального XML создать файл “new.xml”. === touch new.xml
 24. Добавить файл под гит. === git add .
 25. Закоммитить файл. === git commit -m "comment for commit"
 26. Отправить файл на внешний GitHub репозиторий. === git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML. === vim new.xml
 28. Отправить изменения на внешний репозиторий. === git add . / git commit / git push
 29. Создать файл preferences.xml === touch preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML. === vim preferences.xml
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML === touch skills.xml vim skill.xml
 32. Сделать коммит в одну строку. === git add . && git commit
 33. Отправить сразу 2 файла на внешний репозиторий. === git push
 34. На веб интерфейсе создать файл bug_report.xml. === create new file (UI)
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === commit new file (UI)
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML. === edit this file (UI)
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === commit (UI)
 38. Синхронизировать внешний и локальный репозиторий XML === git pull
TXT
 1. Создать внешний репозиторий c названием TXT. === curl -u 'molokov-klim:TOKEN' https://api.github.com/user/repos -d '{"name":"TXT"}'
 2. Клонировать репозиторий TXT на локальный компьютер. === git clone https://github.com/molokov-klim/txt.git
 3. Внутри локального TXT создать файл “new.txt”. === echo > new.txt
 4. Добавить файл под гит. === git add new.txt
 5. Закоммитить файл. ===  git commit -m "17.01.22"
 6. Отправить файл на внешний GitHub репозиторий. === git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT. === vim new.txt (+adding content)
 8. Отправить изменения на внешний репозиторий. === git add . && git commit -m "modified new.txt" && git push
 9. Создать файл preferences.txt === cat > preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT. === cat > preferences.txt (+adding content)
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT === cat > skills.txt (+add content)
 12. Сделать коммит в одну строку. === git add . && git commit -m "adding skills"  
 13. Отправить сразу 2 файла на внешний репозиторий. === git push
 14. На веб интерфейсе создать файл bug_report.txt. === create new file (UI)
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === commit new file (UI)
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT. === edit this file
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. === add content + commit changes
 18. Синхронизировать внешний и локальный репозиторий TXT === git pull